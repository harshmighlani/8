package com.mock.Sample;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Java8Test {

	public static void main(String[] args) {

		// testBiConsumer();
		//supplierWithOptional();
		//testPredicate();
		//testPredicateAndComposition();
		testFunctions();
		
	}

	public static void testFunctions(){
	    List<String> names = Arrays.asList("Smith", "Gourav", "Heather", "John", "Catania");
	    Function<String, Integer> nameMappingFunction = String::length;
	    List<Integer> nameLength = names.stream().map(nameMappingFunction).collect(Collectors.toList());
	    System.out.println(nameLength);
	}
	
	public static void testPredicateAndComposition(){
	    List<String> names = Arrays.asList("John", "Smith", "Samueal", "Catley", "Sie");
	    Predicate<String> startPredicate = str -> str.startsWith("S");
	    Predicate<String> lengthPredicate = str -> str.length() >= 5;
	    names.stream().filter(startPredicate.and(lengthPredicate)).forEach(System.out::println);
	}
	public static void testPredicate() {
		List<String> names = Arrays.asList("John", "Smith", "Samueal", "Catley", "Sie");
		Predicate<String> nameStartsWithS = str -> str.startsWith("S");
		names.stream().filter(nameStartsWithS).forEach(System.out::println);
	}

	public static void supplierWithOptional() {
		Supplier<Double> doubleSupplier = () -> Math.random();
		Optional<Double> optionalDouble = Optional.empty();
		System.out.println(optionalDouble.orElseGet(doubleSupplier));
	}

	private static void testConsumer() {
		Consumer<String> printConsumer = t -> System.out.println(t);

		Stream<String> cities = Stream.of("NY", "London", "Paris");

		cities.forEach(printConsumer);
	}

	private static void testBiConsumer() {

		List<String> cities = Arrays.asList("Sydney", "Dhaka", "New York", "London");

		Consumer<List<String>> upperCaseConsumer = list -> {
			for (int i = 0; i < cities.size(); i++) {
				list.set(i, list.get(i).toUpperCase());
			}
		};

		Consumer<List<String>> printConsumer = list -> list.stream().forEach(System.out::println);

		upperCaseConsumer.andThen(printConsumer).accept(cities);
	}
}
